#!/bin/bash

source resources/setup.sh "$@"
set -- $concatenated

exec &> >(tee ${section_01d_logfile})
print_version

# Step 1: generate a sparse genetic relationship matrix (GRM); PCs has been generated by 01b.
# For family data, use all samples, correcting for the full (sparse) GRM.

if [ "${related}" = "yes" ]; then
    echo "Related is set to yes, making bK sparse"
    # grmfile_relateds generated in 01b

    ${gcta} \
	    --grm ${grmfile_relateds} \
	    --make-bK-sparse 0.05 \
	    --autosome \
	    --make-grm \
	    --out ${grmfile_fast}_rel \
	    --thread-num ${nthreads}

elif [ "${related}" = "no" ]; then
    echo "Related is set to no, making bK sparse"
    
    ${gcta} \
	    --grm ${grmfile_all} \
	    --make-bK-sparse 0.05 \
	    --autosome \
	    --make-grm \
	    --out ${grmfile_fast}_unrel \
	    --thread-num ${nthreads}
fi

# Step2: make covar files for gcta input
echo "Splitting covariate files for GCTA"
${R_directory}Rscript resources/methylation/split_covar.R \
    "${covariates_combined}.txt" \
    "${bfile}.fam" \
    "${ccovar_file}" \
    "${qcovar_file}" \
    "${scripts_directory}" \
    "${genetic_pc_gwas}" \
    "${qcovar_noPC_file}"

# Step 3: Checking positive control file
echo "Checking positive control file"
${R_directory}Rscript resources/genetics/check_positive_controls.R \
    "${positive_control_file}" \
    "${filt_positive_control_file}" \
    "${com_id}"

# Step 4: Loop through each positive control locus
echo "Running positive controls"

covar_option=""
if [ -f "${ccovar_file}" ]; then
  ncols=$(awk -F'\t' 'NR==1{print NF; exit}' "${ccovar_file}" 2>/dev/null || echo 0)
  if [ "${ncols}" -gt 2 ]; then
    covar_option="--covar ${ccovar_file}"
  else
    echo "No categorical covariates detected in ${ccovar_file}; skipping --covar for GCTA."
  fi
else
  echo "Warning: ccovar file not found: ${ccovar_file}"
fi

############################################################################################################
# positive control
############################################################################################################
base_methylation_no_outliers="${methylation_no_outliers_gwas%.Robj}"

tail -n +2 "${filt_positive_control_file}" | while IFS=$'\t' read -r positive_control_cpg positive_control_snp_chr positive_control_snp_pos rsid positive_control_snp_window positive_control_threshold
do
    echo "Processing positive control: $positive_control_cpg, SNP chr: $positive_control_snp_chr, pos: $positive_control_snp_pos, rsid: $rsid, window: $positive_control_snp_window, threshold: $positive_control_threshold"

    # Get the control CpG
    echo "Extracting methylation values for positive control CpG ${positive_control_cpg}"

    ${R_directory}Rscript -e "load('${methylation_no_outliers_gwas}'); \
                if (!exists('norm.beta')) norm.beta <- get(ls()[1]); \
                row <- norm.beta[rownames(norm.beta) == '${positive_control_cpg}', , drop=FALSE]; \
                ids <- colnames(norm.beta); \
                vals <- as.numeric(row[1,]); \
                df <- data.frame(IID = ids, stringsAsFactors = FALSE); \
                df[['${positive_control_cpg}']] <- vals; \
                write.table(df, file='${base_methylation_no_outliers}.${positive_control_cpg}.positive_control', sep='\t', quote=FALSE, row.names=FALSE, col.names=TRUE)"

    echo "making gcta input for positive control CpG ${positive_control_cpg} (untransformed)"
    nrow=`cat ${base_methylation_no_outliers}.${positive_control_cpg}.positive_control | wc -l`
    if [ "$nrow" -lt "2" ]; then
        echo "The positive control CpG ${positive_control_cpg} appears to be missing for mQTL analysis on untransformed methylation data. Please check."
    else 
        ${R_directory}Rscript resources/genetics/make_control.R \
            "${base_methylation_no_outliers}.${positive_control_cpg}.positive_control" \
            "${intersect_ids_plink}" \
            "${base_methylation_no_outliers}.${positive_control_cpg}.positive_control.gcta"

        echo "Perform fastGWA (untransformed) in positive control"
        if [ "${related}" = "yes" ]; then
            echo "grm from related individuals"
            ${gcta} \
                --bfile "${bfile}" \
                --grm-sparse "${grmfile_fast}_rel" \
                --fastGWA-mlm \
                --pheno "${base_methylation_no_outliers}.${positive_control_cpg}.positive_control.gcta" \
                --qcovar "${qcovar_file}" \
                ${covar_option} \
                --out "${section_01_dir}/positive_control_untransformed_${positive_control_cpg}" \
                --thread-num "${nthreads}"

        elif [ "${related}" = "no" ]; then
            echo "grm from unrelated individuals"
            echo "section_01_dir: ${section_01_dir}"
            echo "positive_control_cpg: ${positive_control_cpg}"

            ${gcta} \
                --bfile "${bfile}" \
                --grm-sparse "${grmfile_fast}_unrel" \
                --fastGWA-mlm \
                --pheno "${base_methylation_no_outliers}.${positive_control_cpg}.positive_control.gcta" \
                --qcovar "${qcovar_file}" \
                ${covar_option} \
                --out "${section_01_dir}/positive_control_untransformed_${positive_control_cpg}" \
                --thread-num "${nthreads}"
        fi
        
        tr -s " " < ${section_01_dir}/positive_control_untransformed_${positive_control_cpg}.fastGWA | gzip -c > ${section_01_dir}/positive_control_untransformed_${positive_control_cpg}.fastGWAmlm.gz
        rm ${section_01_dir}/positive_control_untransformed_${positive_control_cpg}.fastGWA

        echo "make manhattan and qq plots (untransformed)"
        echo "${section_01_dir}/positive_control_untransformed_${positive_control_cpg}.fastGWAmlm.gz" > "${section_01_dir}/positive.control.untransformed.file.txt"
        ${R_directory}Rscript resources/genetics/plot_gwas.R \
            "${section_01_dir}/positive.control.untransformed.file.txt" \
            10 \
            8 \
            1 \
            3 \
            2 \
            TRUE \
            "${positive_control_snp_chr}" \
            "${positive_control_snp_pos}" \
            "${positive_control_snp_window}" \
            "${positive_control_threshold}" \
            p
    fi

done

# Step3: Shuffle negative control loci and run the loop again
############################################################################################################
# negative control
############################################################################################################

echo "Running negative control"
# 4 for D, 5 for E, 16 for P
seed=45516

tail -n +2 "${filt_positive_control_file}" | while IFS=$'\t' read -r positive_control_cpg positive_control_snp_chr positive_control_snp_pos rsid positive_control_snp_window positive_control_threshold
do
    negative_control_cpg="NEG_${positive_control_cpg}"

    echo "Processing negative control: $negative_control_cpg"

    echo "Confirming the corresponding positive control exists"
    nrow=`cat ${base_methylation_no_outliers}.${positive_control_cpg}.positive_control | wc -l`
    if [ "$nrow" -lt "2" ]; then
        echo "The positive control CpG ${positive_control_cpg} appears to be missing for mQTL analysis on untransformed methylation data. Please check."
    else
        echo "Shuffle untransformed"
        ${R_directory}Rscript resources/genetics/shuffle_control.R \
            "${base_methylation_no_outliers}.${positive_control_cpg}.positive_control" \
            "${base_methylation_no_outliers}.${negative_control_cpg}.negative_control" \
            "$seed"

        echo "Making gcta input for negative control CpG ${negative_control_cpg} (untransformed)"
        ${R_directory}Rscript resources/genetics/make_control.R \
            "${base_methylation_no_outliers}.${negative_control_cpg}.negative_control" \
            "${intersect_ids_plink}" \
            "${base_methylation_no_outliers}.${negative_control_cpg}.negative_control.gcta"

            echo "Perform GCTA (untransformed) in negative control"
        if [ "${related}" = "yes" ]; then
            ${gcta} \
                --bfile "${bfile}" \
                --grm-sparse "${grmfile_fast}_rel" \
                --fastGWA-mlm \
                --pheno "${base_methylation_no_outliers}.${negative_control_cpg}.negative_control.gcta" \
                --qcovar "${qcovar_file}" \
                ${covar_option} \
                --out "${section_01_dir}/negative_control_untransformed_${negative_control_cpg}" \
                --thread-num "${nthreads}"

        elif [ "${related}" = "no" ]; then
            ${gcta} \
                --bfile "${bfile}" \
                --grm-sparse "${grmfile_fast}_unrel" \
                --fastGWA-mlm \
                --pheno "${base_methylation_no_outliers}.${negative_control_cpg}.negative_control.gcta" \
                --qcovar "${qcovar_file}" \
                ${covar_option} \
                --out "${section_01_dir}/negative_control_untransformed_${negative_control_cpg}" \
                --thread-num "${nthreads}"
        fi

        tr -s " " < "${section_01_dir}/negative_control_untransformed_${negative_control_cpg}.fastGWA" | gzip -c > "${section_01_dir}/negative_control_untransformed_${negative_control_cpg}.fastGWAmlm.gz"
        rm "${section_01_dir}/negative_control_untransformed_${negative_control_cpg}.fastGWA"

        echo "make manhattan and qq plots (untransformed)"
        echo "${section_01_dir}/negative_control_untransformed_${negative_control_cpg}.fastGWAmlm.gz" > "${section_01_dir}/negative.control.untransformed.file.txt"
        ${R_directory}Rscript resources/genetics/plot_gwas.R \
        "${section_01_dir}/negative.control.untransformed.file.txt" \
            10 \
            8 \
            1 \
            3 \
            2 \
            TRUE \
            "${positive_control_snp_chr}" \
            "${positive_control_snp_pos}" \
            "${positive_control_snp_window}" \
            "${positive_control_threshold}" \
            "p"
    fi

done

echo "Successfully completed script 1d"